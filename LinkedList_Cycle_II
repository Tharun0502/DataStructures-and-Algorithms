/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 class Solution {
private:
    ListNode* intersect(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head;

        while(slow && fast){
            fast = fast->next;
            if(fast) fast=fast->next;
            slow = slow->next;

            if(slow == fast) return slow;
        }
        return NULL;
    }
public:
    ListNode *detectCycle(ListNode *head) {
        if(head == NULL || head->next == NULL) return NULL;

        ListNode* intersection = intersect(head);
        if(!intersection) return NULL;
        ListNode* slow = head;
        while(slow != intersection){
            slow = slow->next;
            intersection = intersection->next;
        }
        return slow;
    }
};

